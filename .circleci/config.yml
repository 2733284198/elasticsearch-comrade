version: 2
jobs:
  "build-client":
    machine: true
    steps:
      - checkout
      - restore_cache:
          keys:
            - client3-{{ checksum "client/Dockerfile" }}
      - run:
          name: Load Docker image layer cache
          command: test -f caches/client.tar && (docker load -i caches/client.tar) || echo 'Cache not found'
      - run:
          name: Build application Docker image
          command: docker build --tag client -f client/Dockerfile .
      - run:
          name: Save built docker to workspace
          command: |
            mkdir -p workspace
            docker save -o workspace/client.tar client:latest
      - persist_to_workspace:
          root: workspace
          paths:
            - client.tar
  "cache-client":
    machine: true
    steps:
      - checkout
      - restore_cache:
          keys:
            - client3-{{ checksum "client/Dockerfile" }}
      - run:
          name: Load Docker image layer cache
          command: test -f caches/client.tar && (docker load -i caches/client.tar) || echo 'Cache not found'
      - run:
         name: Save Docker image layer cache
         command: |
           mkdir -p caches/
           docker build --tag client -f client/Dockerfile .
           docker save $(docker history -q client | grep -v '^<missing>$') -o caches/client.tar
      - save_cache:
          key: client3-{{ checksum "client/Dockerfile" }}
          paths:
            - caches/
  "build-ui":
    machine: true
    steps:
      - attach_workspace:
         at: workspace/
      - run:
         name: Load Docker image layer cache
         command: |
           docker load -i workspace/client.tar
      - run:
         name: 'build'
         command: |
           docker images
           docker run -it --name build $(docker images --format '{{.ID}}') npm run build
           UI_ID=$(docker ps -a --filter="name=build" -q)
           docker cp $UI_ID://usr/src/app/dist/ workspace/dist/
  eslint:
    machine: true
    steps:
      - attach_workspace:
         at: workspace/
      - run:
         name: Load Docker image layer cache
         command: |
           docker load -i workspace/client.tar
      - run:
         name: 'eslint'
         command: docker run -it $(docker images --format '{{.ID}}') npm run lint --no-fix
  "build-server":
    machine: true
    steps:
      - checkout
      - restore_cache:
         keys:
           - server2-{{ checksum "server/Dockerfile" }}
      - run:
         name: Load Docker image layer cache
         command: test -f caches/server.tar && (docker load -i caches/server.tar) || echo 'Cache not found'
      - run:
         name: Build application Docker image
         command: docker build --tag server -f server/Dockerfile .
      - run:
          name: Save built docker to workspace
          command: |
            mkdir -p workspace
            docker save -o workspace/server.tar server:latest
      - persist_to_workspace:
          root: workspace
          paths:
            - server.tar
  "cache-server":
    machine: true
    steps:
      - checkout
      - restore_cache:
         keys:
           - server2-{{ checksum "server/Dockerfile" }}
      - run:
         name: Load Docker image layer cache
         command: test -f caches/server.tar && (docker load -i caches/server.tar) || echo 'Cache not found'
      - run:
         name: Save Docker image layer cache
         command: |
           mkdir -p caches/
           docker build --tag server -f server/Dockerfile .
           docker save $(docker history -q server | grep -v '^<missing>$') -o caches/server.tar
      - save_cache:
          key: server2-{{ checksum "server/Dockerfile" }}
          paths:
            - caches/
  flake8:
    machine: true
    steps:
      - attach_workspace:
         at: workspace/
      - run:
         name: Load Docker image layer cache
         command: |
           docker load -i workspace/server.tar
      - run:
         name: 'flake8'
         command: docker run -it $(docker images --format '{{.ID}}') pipenv run flake8 --max-line-length=1000
  pytest:
    machine: true
    steps:
      - attach_workspace:
         at: workspace/
      - run:
         name: Load Docker image layer cache
         command: |
           docker load -i workspace/server.tar
      - run:
         name: 'pytest'
         command: docker run -it $(docker images --format '{{.ID}}') pipenv run pytest
workflows:
  version: 2
  build_and_test:
    jobs:
      - "build-client"
      - "cache-client":
          requires:
            - "build-client"
      - "build-ui":
          requires:
            - "build-client"
      - eslint:
          requires:
            - "build-client"
      - "build-server"
      - "cache-server":
          requires:
            - "build-server"
      - "flake8":
          requires:
            - "build-server"
      - "pytest":
          requires:
            - "build-server"
